name: Test Action - PNPM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-pnpm:
    name: Test with PNPM
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        node-version: ['22', '24']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Create empty pnpm-lock.yaml for setup
        run: |
          # Create empty pnpm-lock.yaml to satisfy cache requirements
          touch pnpm-lock.yaml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get old Nx version
        id: nx-version
        run: |
          # Get an older stable version of Nx for testing migration using pnpm
          OLD_VERSION=$(pnpm view @nx/workspace versions --json | jq -r '.[]' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -20 | head -1 || echo "19.0.0")
          echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "Using Nx version $OLD_VERSION for testing"

      - name: Create test Nx workspace
        run: |
          # Clean up any existing test workspace
          rm -rf test-workspace

          # Create a minimal test workspace
          mkdir test-workspace
          cd test-workspace

          # Create package.json first
          cat > package.json << EOF
          {
            "name": "test-workspace",
            "version": "1.0.0",
            "scripts": {
              "build": "echo 'Build complete'",
              "test": "echo 'Tests complete'"
            },
            "dependencies": {
              "@nx/workspace": "${{ steps.nx-version.outputs.old-version }}",
              "nx": "${{ steps.nx-version.outputs.old-version }}"
            }
          }
          EOF

          # Create nx.json
          cat > nx.json << EOF
          {
            "version": 3,
            "projects": {},
            "targetDefaults": {
              "build": {
                "cache": true
              }
            }
          }
          EOF

          # Install dependencies with pnpm
          pnpm install

          # Verify workspace setup
          echo "=== Workspace created successfully ==="
          ls -la
          cat package.json
          echo "=== End workspace info ==="

      - name: Configure Git for testing
        run: |
          git config --global user.name "nx-migrate-test-bot"
          git config --global user.email "nx-migrate-test-bot@users.noreply.github.com"

      - name: Test Action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-manager: pnpm
          working-directory: './test-workspace'
          validation-commands: 'build'
          merge-strategy: 'always-pr'  # Always create PR for testing
          dev-mode: 'true'  # Enable dev mode for unique matrix branches
          skip-initial-install: 'true'  # Skip since deps already installed in test setup

      - name: Verify outputs
        run: |
          echo "Action completed successfully"
          echo "Package manager: pnpm"
          echo "Node version: ${{ matrix.node-version }}"