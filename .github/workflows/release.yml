name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Nx Migration Action v${{ steps.version.outputs.version }}

            Automatically migrate Nx workspaces to the latest version with validation and smart PR creation.

            ## 📦 Usage

            ```yaml
            - uses: gridatek/nx-migrate-action@v${{ steps.version.outputs.version }}
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                package-manager: npm  # or yarn, pnpm
                validation-commands: build,test
            ```

            ## ✨ Key Features

            - **Multi-package manager support**: npm, yarn, pnpm
            - **Smart branching**: Auto-merge on success or create PR on failure
            - **Configurable validation**: Run build, test, lint with --affected or --all
            - **Version tags**: Support for latest, canary, next versions

            ## 🔗 Documentation

            - [README.md](README.md) - Full documentation and examples
            - [action.yml](action.yml) - All available inputs and outputs

          draft: false
          prerelease: false
          make_latest: true

      - name: Marketplace Publication Instructions
        run: |
          echo "🏪 GitHub Marketplace Publication"
          echo "=================================="
          echo ""
          echo "✅ Release v${{ steps.version.outputs.version }} created successfully!"
          echo ""
          echo "📋 To publish to GitHub Marketplace:"
          echo "1. Go to: https://github.com/${{ github.repository }}/releases"
          echo "2. Click 'Edit' on release v${{ steps.version.outputs.version }}"
          echo "3. Check ☑️ 'Publish this Action to the GitHub Marketplace'"
          echo "4. Select category: 'Continuous Integration'"
          echo "5. Click 'Update release'"
          echo ""
          echo "🎯 Or create issue to automate this step"
          echo ""
          echo "🔗 Direct link: https://github.com/${{ github.repository }}/releases/edit/v${{ steps.version.outputs.version }}"

  update-major-tag:
    name: Update Major Version Tag
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update major version tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          echo "Updating major version tag v$MAJOR_VERSION for release v$VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Delete existing major tag if it exists (locally and remotely)
          if git tag -l "v$MAJOR_VERSION" | grep -q "v$MAJOR_VERSION"; then
            echo "Deleting existing local tag v$MAJOR_VERSION"
            git tag -d v$MAJOR_VERSION
          fi

          echo "Deleting existing remote tag v$MAJOR_VERSION (if exists)"
          git push origin :refs/tags/v$MAJOR_VERSION 2>/dev/null || echo "Remote tag v$MAJOR_VERSION did not exist"

          # Create and push new major tag
          echo "Creating new major tag v$MAJOR_VERSION pointing to v$VERSION"
          git tag v$MAJOR_VERSION
          git push origin v$MAJOR_VERSION

          echo "✅ Successfully updated major version tag: v$MAJOR_VERSION"